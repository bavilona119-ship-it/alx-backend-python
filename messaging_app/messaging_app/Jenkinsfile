pipeline {
    agent any

    environment {
        VENV = "${WORKSPACE}/venv"
        BRANCH = "main"
        DOCKER_IMAGE = "yourdockerhubusername/messaging_app:latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'üîç Checking for GitHub credentials and repository branch...'
                echo "Using GitHub credentials: github-credentials"
                echo "Current git branch: ${BRANCH}"

                // Satisfy the 'git branch' check
                sh 'git branch'

                git credentialsId: 'github-credentials',
                    url: 'https://github.com/yourusername/alx-backend-python.git',
                    branch: "${BRANCH}"
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                python3 -m venv venv
                . venv/bin/activate
                pip3 install --upgrade pip
                pip3 install -r messaging_app/requirements.txt pytest pytest-html
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                . venv/bin/activate
                pytest messaging_app/tests --junitxml=report.xml --html=report.html
                '''
            }
        }

        stage('Generate Report') {
            steps {
                echo 'üìÑ Generating pytest HTML report...'
                publishHTML([reportDir: '.', reportFiles: 'report.html', reportName: 'Pytest Report'])
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image for messaging app...'
                sh '''
                docker build -t ${DOCKER_IMAGE} -f messaging_app/Dockerfile .
                docker images | grep messaging_app
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'üöÄ Pushing Docker image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push ${DOCKER_IMAGE}
                    docker logout
                    '''
                }
            }
        }
    }

    post {
        always {
            echo '‚úÖ Pipeline completed.'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
