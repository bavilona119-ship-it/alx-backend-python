from django.db import models
from django.contrib.auth.models import User


class Message(models.Model):
    """
    Modèle principal pour stocker les messages échangés entre utilisateurs.
    """
    sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
    receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    edited = models.BooleanField(default=False)  # ✅ Indique si le message a été modifié

    def __str__(self):
        return f"Message from {self.sender.username} to {self.receiver.username}"

    def get_edit_history(self):
        """
        ✅ Permet d’afficher tout l’historique des modifications
        dans l’interface utilisateur (UI).
        """
        return self.history.all().order_by('-edited_at')


class MessageHistory(models.Model):
    """
    ✅ Modèle pour stocker les anciennes versions d’un message avant édition.
    """
    message = models.ForeignKey(Message, related_name='history', on_delete=models.CASCADE)
    old_content = models.TextField()
    edited_at = models.DateTimeField(auto_now_add=True)  # ✅ Date de l’édition
    edited_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)  # ✅ Auteur de la modification

    def __str__(self):
        return f"History of Message {self.message.id} edited by {self.edited_by} at {self.edited_at}"


class Notification(models.Model):
    """
    Modèle pour notifier les utilisateurs quand ils reçoivent un nouveau message.
    """
    user = models.ForeignKey(User, related_name='notifications', on_delete=models.CASCADE)
    message = models.ForeignKey(Message, related_name='notifications', on_delete=models.CASCADE)
    text = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

    def __str__(self):
        return f"Notification for {self.user.username}: {self.text}"
